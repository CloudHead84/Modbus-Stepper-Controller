FUNCTION_BLOCK MC_Home
VAR_INPUT
	I_xExecute		: BOOL;
	I_rVelocity		: REAL;
	I_rAcceleration	: REAL;
	I_rDeceleration : REAL;
	I_rPosition		: REAL;	
END_VAR
VAR_OUTPUT
	Q_xDone			: BOOL;
	Q_xBusy			: BOOL;
	Q_xActive		: BOOL;
	Q_xError		: BOOL;	
END_VAR
VAR_IN_OUT
	Axis : Axis_Ref;
END_VAR
VAR
	iState : INT;
	inst_Timeout : FB_StepTimeout;	
END_VAR

CASE iState OF
	(*idle*)
	0:

	IF 	Axis.INTERN_xReady
		AND I_xExecute
		AND (I_rVelocity <> 0.0)
		AND (I_rAcceleration <> 0.0)
		AND (I_rDeceleration <> 0.0)	
		AND NOT Axis.IN_xSwitch
		AND NOT Axis.IN_xRunning 
		THEN
		iState := 10;
	END_IF;
	
	10:
	Axis.OUT_iModeReq := 20;
	
	Axis.OUT_rTargetSpeed := I_rVelocity;
	Axis.OUT_rTargetAcc := I_rAcceleration;
	Axis.OUT_rTargetDec := I_rDeceleration;
	
	Axis.INTERN_xReqValueCheck := TRUE;
	
	IF Axis.INTERN_xValuesOK THEN
		iState := 20;
	END_IF;
	
	20:
	Axis.INTERN_xReqValueCheck := FALSE;
	Axis.OUT_xStartReq := TRUE;
	
	IF  Axis.IN_xAck THEN
		iState := 30;
		Axis.OUT_xStartReq := FALSE;
	END_IF;
	
	30:
	Axis.OUT_xStartReq := FALSE;
	
	IF Axis.IN_xSwitch THEN
	iState := 40;
	END_IF;
	
	40:
	Axis.OUT_iModeReq := 21;


	Axis.OUT_rTargetSpeed := I_rVelocity/-10.0;
	Axis.OUT_rTargetAcc := I_rAcceleration;
	Axis.OUT_rTargetDec := I_rDeceleration;
	
	Axis.INTERN_xReqValueCheck := TRUE;
	
	IF Axis.INTERN_xValuesOK THEN
		iState := 50;
	END_IF;	
	
	50:
	Axis.INTERN_xReqValueCheck := FALSE;
	Axis.OUT_xStartReq := TRUE;
	Axis.OUT_rTargetPosition := I_rPosition;	
	
	IF  Axis.IN_xAck THEN
		iState := 60;
		Axis.OUT_xStartReq := FALSE;
	END_IF;	
	
	60:	
	Axis.OUT_xStartReq := FALSE;
	
	IF NOT Axis.IN_xSwitch THEN
	iState := 99;
	END_IF;	
	
	99:
	Axis.INTERN_xRef := TRUE;
	Axis.OUT_iModeReq := 0;
	Axis.OUT_rTargetPosition := 0.0; 
	IF NOT I_xExecute THEN
		iState := 0;

	END_IF;
	
END_CASE;


(*timeout*)
inst_Timeout(I_xEnable:= iState <> 0 , I_iStep:= iState, I_tTimeout:=T#20S);
IF inst_Timeout.Q_xError THEN
	iState := 0;
END_IF;
(*Error*)
IF inst_Timeout.Q_xError THEN
	Q_xError := TRUE;
	Axis.INTERN_xErrorStop := TRUE;
ELSIF Axis.INTERN_xReset THEN
	Q_xError := FALSE;
END_IF

(* outputs*)
Q_xDone := iState = 99;
Q_xBusy := iState <> 0;
